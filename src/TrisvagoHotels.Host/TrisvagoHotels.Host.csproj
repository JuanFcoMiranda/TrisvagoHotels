<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk.Web">
    <PropertyGroup>
        <TargetFramework>$(NetCoreTargetVersion)</TargetFramework>
        <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
        <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
        <IsPackable>false</IsPackable>
        <SpaRoot>ClientApp\</SpaRoot>
        <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
        <!-- Set this to true if you enable server-side prerendering -->
        <BuildServerSideRenderer>false</BuildServerSideRenderer>
        <UserSecretsId>2c1de0fa-f35c-4bfa-a3ca-32df42a6da08</UserSecretsId>
        <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
        <DockerfileContext>..\..</DockerfileContext>
    </PropertyGroup>
    <ItemGroup>
        <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="$(MicrosoftAspNetCoreSpaServicesExtensions)" />
        <PackageReference Include="AspNetCore.HealthChecks.UI" Version="$(AspNetCoreHealthChecksUIVersion)" />
        <PackageReference Include="Microsoft.AspNetCore.Hosting.Abstractions" Version="$(MicrosoftAspNetCoreHostingVersion)" />
        <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" Version="$(MicrosoftExtensionsHostingVersion)" />
        <PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" Version="$(MicrosoftExtensionsConfigurationUserSecretsVersion)" />
        <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="$(MicrosoftVisualStudioAzureContainersToolsTargetsVersion)" />
        <PackageReference Include="MediatR" Version="$(MediatRVersion)" />
        <PackageReference Include="MediatR.Extensions.Microsoft.DependencyInjection" Version="$(MediatRExtensionsMicrosoftDependencyInjectionVersion)" />
    </ItemGroup>
    <ItemGroup>
        <!-- Don't publish the SPA source files, but do show them in the project files list -->
        <Content Remove="$(SpaRoot)**" />
        <!-- remove duplicate .json files from Content -->
        <Content Remove="appsettings.json;appsettings.Development.json;bundleconfig.json" />
        <Content Include="appsettings.json" Condition="Exists('appsettings.json')" />
        <Content Include="appsettings.Development.json" Condition="Exists('appsettings.Development.json')" />
        <Content Include="bundleconfig.json" Condition="Exists('bundleconfig.json')" />
        <!-- remove .ts files from None, they should be in TypeScriptCompile instead -->
        <None Remove="**/*.ts" />
    </ItemGroup>
    <ItemGroup>
        <None Remove="healthchecksdb" />
    </ItemGroup>
    <ItemGroup>
        <ProjectReference Include="..\TrisvagoHotels.Api\TrisvagoHotels.Api.csproj">
            <GlobalPropertiesToRemove>
            </GlobalPropertiesToRemove>
        </ProjectReference>
        <ProjectReference Include="..\TrisvagoHotels.DataContext\TrisvagoHotels.DataContext.csproj">
            <GlobalPropertiesToRemove>
            </GlobalPropertiesToRemove>
        </ProjectReference>
        <ProjectReference Include="..\TrisvagoHotels.DataContracts\TrisvagoHotels.DataContracts.csproj">
            <GlobalPropertiesToRemove>
            </GlobalPropertiesToRemove>
        </ProjectReference>
        <ProjectReference Include="..\TrisvagoHotels.Providers\TrisvagoHotels.Providers.csproj">
            <GlobalPropertiesToRemove>
            </GlobalPropertiesToRemove>
        </ProjectReference>
        <ProjectReference Include="..\TrisvagoHotels.Uow\TrisvagoHotels.Uow.csproj">
            <GlobalPropertiesToRemove>
            </GlobalPropertiesToRemove>
        </ProjectReference>
        <ProjectReference Include="..\TrisvagoHotels.Services\TrisvagoHotels.Services.csproj">
            <GlobalPropertiesToRemove>
            </GlobalPropertiesToRemove>
        </ProjectReference>
    </ItemGroup>
    <ItemGroup>
        <TypeScriptCompile Include="ClientApp\src\app\app-routing.module.ts" />
        <TypeScriptCompile Include="ClientApp\src\app\home\home.component.ts" />
        <TypeScriptCompile Include="ClientApp\src\app\models\hotel.ts" />
        <TypeScriptCompile Include="ClientApp\src\app\nav-menu\nav-menu.component.ts" />
        <TypeScriptCompile Include="ClientApp\e2e\src\app.e2e-spec.ts" />
        <TypeScriptCompile Include="ClientApp\e2e\src\app.po.ts" />
        <TypeScriptCompile Include="ClientApp\src\app\services\hotel.service.ts" />
        <TypeScriptCompile Include="ClientApp\src\app\services\hotel.service.spec.ts" />
        <TypeScriptCompile Include="ClientApp\src\main.ts" />
        <TypeScriptCompile Include="ClientApp\src\polyfills.ts" />
        <TypeScriptCompile Include="ClientApp\src\test.ts" />
        <TypeScriptCompile Include="ClientApp\src\app\hoteladdedit\hoteladdedit.component.ts" />
    </ItemGroup>
    <ItemGroup>
        <Folder Include="Resources" />
        <Folder Include="Properties\" />
    </ItemGroup>
    <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
        <!-- Ensure Node.js is installed -->
        <Exec Command="node --version" ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
        </Exec>
        <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
        <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    </Target>
    <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
        <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod" />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />
        <!-- Include the newly-built files in the publish output -->
        <ItemGroup>
            <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
            <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
            <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
                <RelativePath>%(DistFiles.Identity)</RelativePath>
                <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
                <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
            </ResolvedFileToPublish>
        </ItemGroup>
    </Target>
</Project>